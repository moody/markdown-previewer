{"version":3,"sources":["utils.js","components/Editor/Editor.js","components/Preview/Preview.js","components/App/App.js","serviceWorker.js","index.js"],"names":["getPaneClasses","isModal","concat","INITIAL_EDITOR_DATA","Editor","react_default","a","createElement","id","className","this","props","index_es","icon","onClick","toggleModal","onChange","handleChange","spellCheck","defaultValue","text","placeholder","Component","Preview","markup","__html","marked","dangerouslySetInnerHTML","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","editorModal","previewModal","bind","assertThisInitialized","event","setState","target","value","editor","components_Editor_Editor","preview","components_Preview_Preview","href","rel","Boolean","window","location","hostname","match","library","add","faExpand","faEdit","faEye","ReactDOM","render","components_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c290c44e.chunk.js","sourcesContent":["export const getPaneClasses = (isModal) => `pane${isModal ? \" modal\" : \"\"}`;\r\n\r\nexport const INITIAL_EDITOR_DATA = `# Welcome to my React Markdown Previewer!\r\n\r\n## This is a sub-heading...\r\n### And here's some other cool stuff:\r\n  \r\nHeres some code, \\`<div></div>\\`, between 2 backticks.\r\n\r\n\\`\\`\\`\r\n// this is multi-line code:\r\n\r\nfunction anotherExample(firstLine, lastLine) {\r\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\r\n    return multiLineCode;\r\n  }\r\n}\r\n\\`\\`\\`\r\n  \r\nYou can also make text **bold**... whoa!\r\nOr _italic_.\r\nOr... wait for it... **_both!_**\r\nAnd feel free to go crazy ~~crossing stuff out~~.\r\n\r\nThere's also [links](https://www.freecodecamp.com), and\r\n> Block Quotes!\r\n\r\nAnd if you want to get really crazy, even tables:\r\n\r\nWild Header | Crazy Header | Another Header?\r\n------------ | ------------- | ------------- \r\nYour content can | be here, and it | can be here....\r\nAnd here. | Okay. | I think we get it.\r\n\r\n- And of course there are lists.\r\n  - Some are bulleted.\r\n     - With different indentation levels.\r\n        - That look like this.\r\n\r\n\r\n1. And there are numbererd lists too.\r\n1. Use just 1s if you want! \r\n1. But the list goes on...\r\n- Even if you use dashes or asterisks.\r\n* And last but not least, let's not forget embedded images:\r\n\r\n![React Logo w/ Text](https://goo.gl/Umyytc)`;\r\n","import React, { Component } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { getPaneClasses } from '../../utils';\r\nimport './Editor.scss';\r\n\r\nclass Editor extends Component {\r\n  render() {\r\n    return (\r\n      <div id=\"editor-pane\" className={getPaneClasses(this.props.isModal)}>\r\n        <header className=\"pane-header\">\r\n          <div>\r\n            <FontAwesomeIcon icon=\"edit\"/>\r\n            <p>Editor</p>\r\n          </div>\r\n          <FontAwesomeIcon id=\"editor-expander\" className=\"expand-button\" icon=\"expand\" onClick={this.props.toggleModal}/>\r\n        </header>\r\n\r\n        <textarea id=\"editor\" onChange={this.props.handleChange} spellCheck=\"false\" defaultValue={this.props.text} placeholder=\"Enter markup...\"></textarea>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Editor;\r\n","import React, { Component } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport marked from 'marked';\r\nimport { getPaneClasses } from '../../utils';\r\nimport './Preview.scss';\r\n\r\nclass Preview extends Component {\r\n  render() {\r\n    let markup = { __html: marked(this.props.markup) };\r\n    return (\r\n      <div id=\"preview-pane\" className={getPaneClasses(this.props.isModal)}>\r\n        <header className=\"pane-header\">\r\n          <div>\r\n            <FontAwesomeIcon icon=\"eye\"/>\r\n            <p>Live Preview</p>\r\n          </div>\r\n          <FontAwesomeIcon id=\"preview-expander\" className=\"expand-button\" icon=\"expand\" onClick={this.props.toggleModal}/>\r\n        </header>\r\n        \r\n        <div id=\"preview\" dangerouslySetInnerHTML={markup}></div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Preview;\r\n","import React, { Component } from 'react';\nimport { INITIAL_EDITOR_DATA } from '../../utils';\nimport Editor from '../Editor/Editor';\nimport Preview from '../Preview/Preview';\nimport './App.scss';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      text: INITIAL_EDITOR_DATA,\n      editorModal: false,\n      previewModal: false\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.toggleModal = this.toggleModal.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({ text: event.target.value });\n  }\n\n  toggleModal(event) {\n    switch (event.target.id) {\n      case \"editor-expander\":\n        this.setState({\n          editorModal: !this.state.editorModal,\n          previewModal: false\n        });\n        break;\n      case \"preview-expander\":\n        this.setState({\n          editorModal: false,\n          previewModal: !this.state.previewModal\n        });\n        break;\n      default:\n        break;\n    }\n  }\n\n  render() {\n    let editor = <Editor text={this.state.text} handleChange={this.handleChange} toggleModal={this.toggleModal} isModal={this.state.editorModal} />;\n    let preview = <Preview markup={this.state.text} toggleModal={this.toggleModal} isModal={this.state.previewModal} />;\n    if (this.state.editorModal) preview = <div></div>;\n    if (this.state.previewModal) editor = <div></div>;\n    return (\n      <div id=\"main\">\n        <div id=\"pane-container\">\n          {editor}\n          {preview}\n        </div>\n\n        <footer id=\"footer\">\n          <p>created by <a href=\"https://github.com/moody\" target=\"_blank\" rel=\"noopener noreferrer\">justin moody</a></p>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faExpand, faEdit, faEye } from '@fortawesome/free-solid-svg-icons';\nimport 'normalize.css';\nimport './styles/shared.scss';\nimport './index.scss';\n\nlibrary.add(faExpand, faEdit, faEye);\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}